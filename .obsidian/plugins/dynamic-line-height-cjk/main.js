/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DynamicLineHeightPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/editing-view.ts
var import_language = require("@codemirror/language");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var dynamicLineHeightField = (plugin) => import_state.StateField.define({
  create(state) {
    return import_view.Decoration.set(remake(plugin, state));
  },
  update(prev, tr) {
    if (tr.docChanged) {
      let ret = prev.map(tr.changes);
      tr.changes.iterChangedRanges((fromA, toA, fromB, toB) => {
        ret = ret.update({
          add: remake(plugin, tr.state, fromB, toB),
          filter: () => false,
          filterFrom: tr.state.doc.lineAt(fromB).from,
          filterTo: tr.state.doc.lineAt(toB).from
        });
      });
      return ret;
    } else {
      return prev;
    }
  },
  provide(field) {
    return import_view.EditorView.decorations.from(field);
  }
});
function remake(plugin, state, from, to) {
  const decorations = [];
  const tree = (0, import_language.syntaxTree)(state);
  from = from != null ? from : 0;
  to = to != null ? to : state.doc.length;
  for (let i = state.doc.lineAt(from).number; i <= state.doc.lineAt(to).number; i++) {
    const line = state.doc.line(i);
    if (plugin.containsCJK(line.text)) {
      decorations.push(
        import_view.Decoration.line({ class: "cjk" }).range(line.from)
      );
    }
  }
  return decorations;
}

// src/reading-view.ts
var dynamicLineHeightPostProcessor = (plugin) => (el, ctx) => {
  for (const paragraph of el.querySelectorAll("p, li")) {
    if (paragraph.textContent) {
      if (plugin.containsCJK(paragraph.textContent)) {
        paragraph.classList.add("cjk");
      }
    }
  }
};

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  "CJK Unified Ideographs": true,
  "CJK Unified Ideographs Extension A": false,
  "CJK Unified Ideographs Extension B": false,
  "CJK Unified Ideographs Extension C": false,
  "CJK Unified Ideographs Extension D": false,
  "CJK Unified Ideographs Extension E": false,
  "CJK Unified Ideographs Extension F": false,
  "CJK Unified Ideographs Extension G": false,
  "CJK Unified Ideographs Extension H": false,
  "CJK Unified Ideographs Extension I": false,
  "CJK Compatibility Ideographs": false,
  "Hiragana": true,
  "Katakana": true,
  "Half-width Katakana": false,
  "Katakana Phonetic Extensions": true,
  "Japanese Punctuation": true,
  "Hangul Jamo": true,
  "Hangul Jamo Extended-A": true,
  "Hangul Jamo Extended-B": true,
  "Hangul Compatibility Jamo": true,
  "Hangul Syllables": true
};
var DynamicLineHeightSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    this.containerEl.empty();
    new import_obsidian.Setting(this.containerEl).setDesc("Choose which Unicode blocks should be included.");
    new import_obsidian.Setting(this.containerEl).setName("Chinese characters").setHeading();
    this.addToggleSetting("CJK Unified Ideographs").setDesc("The most common CJK ideographs used in modern Chinese, Japanese, Korean and Vietnamese characters.");
    this.addToggleSetting("CJK Unified Ideographs Extension A");
    this.addToggleSetting("CJK Unified Ideographs Extension B");
    this.addToggleSetting("CJK Unified Ideographs Extension C");
    this.addToggleSetting("CJK Unified Ideographs Extension D");
    this.addToggleSetting("CJK Unified Ideographs Extension E");
    this.addToggleSetting("CJK Unified Ideographs Extension F");
    this.addToggleSetting("CJK Unified Ideographs Extension G");
    this.addToggleSetting("CJK Unified Ideographs Extension H");
    this.addToggleSetting("CJK Unified Ideographs Extension I");
    this.addToggleSetting("CJK Compatibility Ideographs");
    new import_obsidian.Setting(this.containerEl).setName("Japanese").setHeading();
    this.addToggleSetting("Hiragana");
    this.addToggleSetting("Katakana");
    this.addToggleSetting("Half-width Katakana");
    this.addToggleSetting("Katakana Phonetic Extensions");
    this.addToggleSetting("Japanese Punctuation");
    new import_obsidian.Setting(this.containerEl).setName("Korean").setHeading();
    this.addToggleSetting("Hangul Jamo");
    this.addToggleSetting("Hangul Jamo Extended-A");
    this.addToggleSetting("Hangul Jamo Extended-B");
    this.addToggleSetting("Hangul Compatibility Jamo");
    this.addToggleSetting("Hangul Syllables");
  }
  addToggleSetting(key) {
    return new import_obsidian.Setting(this.containerEl).setName(key).addToggle((toggle) => toggle.setValue(this.plugin.settings[key]).onChange(async (value) => {
      this.plugin.settings[key] = value;
      this.plugin.setRegExp();
      await this.plugin.saveSettings();
    }));
  }
};

// src/main.ts
var DynamicLineHeightPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.setRegExp();
    await this.saveSettings();
    this.addSettingTab(new DynamicLineHeightSettingTab(this));
    this.registerMarkdownPostProcessor(dynamicLineHeightPostProcessor(this));
    this.registerEditorExtension(dynamicLineHeightField(this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  setRegExp() {
    let pattern = "";
    if (this.settings["CJK Unified Ideographs"])
      pattern += "\\u4e00-\\u9fff";
    if (this.settings["CJK Unified Ideographs Extension A"])
      pattern += "\\u3400-\\u4dbf";
    if (this.settings["CJK Unified Ideographs Extension B"])
      pattern += "\\u20000-\\u2A6DF";
    if (this.settings["CJK Unified Ideographs Extension C"])
      pattern += "\\u2A700-\\u2B73F";
    if (this.settings["CJK Unified Ideographs Extension D"])
      pattern += "\\u2B740-\\u2B81F";
    if (this.settings["CJK Unified Ideographs Extension E"])
      pattern += "\\u2B820-\\u2CEAF";
    if (this.settings["CJK Unified Ideographs Extension F"])
      pattern += "\\u2CEB0-\\u2EBEF";
    if (this.settings["CJK Unified Ideographs Extension G"])
      pattern += "\\u30000-\\u3134F";
    if (this.settings["CJK Unified Ideographs Extension H"])
      pattern += "\\u31350-\\u323AF";
    if (this.settings["CJK Unified Ideographs Extension I"])
      pattern += "\\u2EBF0-\\u2EE5F";
    if (this.settings["CJK Compatibility Ideographs"])
      pattern += "\\uF900-\\uFAFF";
    if (this.settings["Hiragana"])
      pattern += "\\u3040-\\u309F";
    if (this.settings["Katakana"])
      pattern += "\\u30A0-\\u30FF";
    if (this.settings["Half-width Katakana"])
      pattern += "\\uFF65-\\uFF9F";
    if (this.settings["Katakana Phonetic Extensions"])
      pattern += "\\u31F0-\\u31FF";
    if (this.settings["Japanese Punctuation"])
      pattern += "\\u3000-\\u303F";
    if (this.settings["Hangul Jamo"])
      pattern += "\\u1100-\\u11FF";
    if (this.settings["Hangul Jamo Extended-A"])
      pattern += "\\uA960-\\uA97F";
    if (this.settings["Hangul Jamo Extended-B"])
      pattern += "\\uD7B0-\\uD7FF";
    if (this.settings["Hangul Compatibility Jamo"])
      pattern += "\\u3130-\\u318F";
    if (this.settings["Hangul Syllables"])
      pattern += "\\uAC00-\\uD7AF";
    this._regexp = new RegExp(`[${pattern}]`);
  }
  containsCJK(line) {
    return this._regexp.test(line);
  }
};
